function LoadChar() {
using (ScriptAPI) {
        StartNode("Char Info");
		AddInt("Charid");
		AddPaddedString("Charname", 13);
		AddByte("Gender");
		AddByte("Skin");
		AddInt("Face");
		AddInt("Hair");
		AddLong("PetID 1");
		AddLong("PetID 2");
		AddLong("PetID 3");
		AddByte("Level");
		job = AddShort("Job");
		AddShort("STR");
		AddShort("DEX");
		AddShort("INT");
		AddShort("LUK");
		AddInt("HP");
		AddInt("MaxHP");
		AddInt("MP");
		AddInt("MaxMP");
		AddShort("AP");
		a1 = job;
        adventurer = a1 % 1000 / 100;
        if (a1 / 100 == 27)
            adventurer = 2;
        if (a1 / 100 == 36)
            adventurer = 4;

		if (
                a1 / 1000 == 1 && (adventurer == 5 || adventurer == 3 || adventurer == 1 || adventurer == 0) ||
                a1 / 1000 == 3 ||
                
                    a1 / 100 == 22 || a1 == 2001 || 
                    a1 / 100 == 23 || a1 == 2002 || 
                    a1 / 100 == 24 || a1 == 2003 || 
                    a1 / 100 == 51 || a1 == 5000 ||
                    a1 / 100 == 27 || a1 == 2004 ||
                    a1 / 100 == 61 || a1 == 6000 ||
                    a1 / 100 == 65 || a1 == 6001 ||
                    a1 / 10 == 57 || a1 == 508 ||
		            a1 / 1000 == 4 ) {
			l = AddByte("SPS");
			for (j = 0; j < l; j++) {
				AddByte("VAL1");
				AddInt("VAL2");
			}
		}
		else {
	    	AddShort("SP");
		}
		AddLong("EXP");
		AddInt("Fame");
		AddInt("Gacha EXP");
		AddInt("New v.141 - unk");
		AddInt("MapID");
		AddByte("MapPOS");
		AddInt("UNK");
		AddShort("Job sub ID");
	    if ( a1 / 100 == 31 || a1 / 100 == 36 || a1 == 3001 || a1 == 3002) {
		    AddInt("Something?");
    	}
		AddByte("UNK");
		AddInt("YYYYMMDDmm"); // Year Month Day Minute
		
		AddField("Traits", 6 * 4);
		AddField("Today Traits", 6 * 2);
	    
	    AddField("Leftover ", 9);
		
		AddInt(".");
		
		AddByte("!");
		AddInt("!!!!");
		AddByte("!");
		AddByte("!");
		AddInt("!!!!");
		AddByte("!");
		
		AddInt("!!!!");
		AddInt("!!!!");
		
		AddInt("!!!!");
		AddByte("!");
		
		// Other function
		for (i = 1; i <= 9; i++) {
			StartNode("Block " + i);
			AddInt(">>>");
			AddByte("Wut");
			AddInt("<<<<");
			EndNode(false);
		}
		
		AddInt("part1");
		AddInt("part2");
	    EndNode(false);
	}
}

function DecodeAvatar() {
    using (ScriptAPI) {
		AddByte("Gender");
		AddByte("Skin");
		AddInt("Face");
		a1 = AddInt("Job ID");
	
		AddByte("SLOT 1 LOL");
		AddInt("Hair");
        StartNode("Equips Hidden");
		for (j = 1; j != 0xFF; j++) {
		    val = AddByte("SLOT " + j);
			if (val == 0xFF) break;
		    AddInt("Item ID " + j);
		}
		EndNode(false);
		
        StartNode("Equips Shown");
		for (j = 1; j != 0xFF; j++) {
		    val = AddByte("SLOT " + j);
			if (val == 0xFF) break;
		    AddInt("Item ID " + j);
		}
		EndNode(false);
		
        StartNode("Equips DERP");
		for (j = 1; j != 0xFF; j++) {
		    val = AddByte("SLOT " + j);
			if (val == 0xFF) break;
		    AddInt("Item ID " + j);
		}
		EndNode(false);
		
		AddInt("Cash Equip");
		AddInt("Cash Equip?");
		AddInt("Cash Equip?2");
		AddByte("0?");
		AddInt("Pet1");
		AddInt("Pet2");
		AddInt("Pet3");
	    if ( a1 / 100 == 31 || a1 == 3001) {
		    AddInt("Demonslayer thingy");
		}		
	}	

	
	
}




function IsBeginnerJob(pJobID)
{
    return (pJobID % 1000) == 0
        || pJobID == 2001
        || pJobID == 2002
        || pJobID == 3001
        || pJobID == 2003
        || pJobID == 5000
        || pJobID == 2004
        || pJobID == 6000
        || pJobID == 6001;
}

function is_ignore_master_level_for_common(pSkillID)
{
    v1 = false;
    if (pSkillID > 5220014)
    {
        if (pSkillID > 22181004)
        {
            if (pSkillID <= 33121005)
            {
                if (pSkillID == 33121005 || pSkillID == 23120011 || pSkillID == 23121008)
                    return true;
                return pSkillID == 33120010;
            }
            if (pSkillID != 35120014)
            {
                return pSkillID == 51120000;
            }
        }
        else
        {
            if (pSkillID != 22181004)
            {
                if (pSkillID > 5720005)
                {
                    if (pSkillID == 5720008 || pSkillID == 5720012)
                        return true;
                    return pSkillID == 21120011;
                }
                if (pSkillID != 5720005)
                {
                    if (pSkillID > 5321004)
                    {
                        return pSkillID == 5321006;
                    }
                    if (pSkillID < 5321003)
                    {
                        return pSkillID == 5320007;
                    }
                }
            }
        }
        return true;
    }
    if (pSkillID == 5220014)
        return true;
    if (pSkillID > 3220010)
    {
        if (pSkillID <= 4340010)
        {
            if (pSkillID == 4340010 || pSkillID == 3220012 || pSkillID == 4110012)
                return true;
            return pSkillID == 4210012;
        }
        if (pSkillID > 5120012)
        {
            return pSkillID == 5220012;
        }
        if (pSkillID < 5120011)
        {
            return pSkillID == 4340012;
        }
        return true;
    }
    if (pSkillID >= 3220009)
        return true;
    if (pSkillID > 2121009)
    {
        if (pSkillID > 2321010)
        {
            if (pSkillID < 3120010 || pSkillID > 3120012)
                return false;
        }
        else
        {
            if (pSkillID != 2321010)
            {
                return pSkillID == 2221009;
            }
        }
        return true;
    }
    if (pSkillID == 2121009 || pSkillID == 1120012 || pSkillID == 1220013)
        return true;
    return pSkillID == 1320011;
}

function is_skill_need_master_level(pSkillID)
{
    if (is_ignore_master_level_for_common(pSkillID)) return false;
	tmp = (pSkillID - (pSkillID % 1000000)) / 1000000;
    if (tmp == 92) return false;

    tmp = 10000 * pSkillID / 10000;

    if ((pSkillID / 1000000 != 92 || pSkillID % 10000 >= 1) &&
        (tmp / 1000000 == 92) && tmp % 10000 == 0) return false;

	tmp = pSkillID;
	tmp -= (tmp % 10000);
    tmp = tmp / 10000;
	ScriptAPI.AddComment("Skill TMP: " + tmp);
    if (tmp == 8000
              || (tmp % 1000) == 0
              || tmp == 2001
              || tmp == 2002
              || tmp == 3001
              || tmp == 3002
              || tmp == 3600
              || tmp == 2003
              || tmp == 5000
              || tmp == 2004
              || tmp == 6000
              || tmp == 6001
              || tmp == 4001 // Added!
              || tmp == 4002 
	
	) return false;

    if (IsBeginnerJob(tmp)) return false;
    
    jobtype = GetJobType(tmp);
    if (IsEvanJob(tmp))
    {
        if (jobtype != 9 && jobtype != 10 && pSkillID != 22111001 && pSkillID != 22141002 && pSkillID != 22140000)
            return false;
    }
    else
    {
        if (pSkillID != 4311003 && pSkillID != 4331002 && pSkillID != 4321006 && pSkillID != 4330009)
            return jobtype == 4;
    }

    return true;
}

function IsEvanJob(pJobID)
{
    return (pJobID / 100 == 22 || pJobID == 2001);
}

function  GetJobType(pJobID)
{
    if (IsBeginnerJob(pJobID) || (pJobID % 100) == 0 || pJobID == 501 || pJobID == 508)
    {
        return 1;
    }
    else
    {
        tmp = 0;
        if (pJobID / 10 == 43)
            tmp = (pJobID - 430) / 2;
        else
            tmp = pJobID % 10;
        tmp += 2;
        if (tmp >= 2 && (tmp <= 4 || tmp <= 10 && IsEvanJob(pJobID)))
            return tmp;
        else
            return 0;
    }

}



function DecodeItem() {
	using (ScriptAPI) {
		type = AddByte("Type");
		item = AddInt("Item ID");
		iscash = AddByte("HasCashid");
		if (iscash == 0x01) {
			AddLong("CashID");
		}
		
		AddLong("Expiration Time");
		AddInt("-1 ?");
		if (type == 0x01) {
			StartNode("Flags part 1");
	           flag = AddInt("Status Flags v.132");
			inputflag = flag;
			flag = ReadIfFlaggedByte(flag, 0x01, "Slots");
			flag = ReadIfFlaggedByte(flag, 0x02, "Scrolls");

			flag = ReadIfFlaggedShort(flag, 0x04, "Str");
			flag = ReadIfFlaggedShort(flag, 0x08, "Dex");
			flag = ReadIfFlaggedShort(flag, 0x10, "Int");
			flag = ReadIfFlaggedShort(flag, 0x20, "Luk");
			flag = ReadIfFlaggedShort(flag, 0x40, "HP");
			flag = ReadIfFlaggedShort(flag, 0x80, "MP");
			flag = ReadIfFlaggedShort(flag, 0x100, "WATK");
			flag = ReadIfFlaggedShort(flag, 0x200, "MATK");
			flag = ReadIfFlaggedShort(flag, 0x400, "WDEF");
			flag = ReadIfFlaggedShort(flag, 0x800, "MDEF");
			flag = ReadIfFlaggedShort(flag, 0x1000, "ACC");
			flag = ReadIfFlaggedShort(flag, 0x2000, "Avo");
			flag = ReadIfFlaggedShort(flag, 0x4000, "Hands");
			flag = ReadIfFlaggedShort(flag, 0x8000, "Speed");
			flag = ReadIfFlaggedShort(flag, 0x10000, "Jump");
			flag = ReadIfFlaggedShort(flag, 0x20000, "Flags");

			flag = ReadIfFlaggedByte(flag, 0x40000, "Increased Skill");

			flag = ReadIfFlaggedByte(flag, 0x80000, "Item Level");
			flag = ReadIfFlaggedLong(flag, 0x100000, "Item EXP");

			flag = ReadIfFlaggedInt(flag, 0x200000, "unk1112");

			flag = ReadIfFlaggedInt(flag, 0x400000, "Hammertiem");

			flag = ReadIfFlaggedShort(flag, 0x800000, "PVP Damage");
			flag = ReadIfFlaggedByte(flag, 0x1000000, "unk118");
			flag = ReadIfFlaggedShort(flag, 0x2000000, "unk119");
			flag = ReadIfFlaggedInt(flag, 0x4000000, "unk1176");

			flag = ReadIfFlaggedByte(flag, 0x8000000, "unk115");
			flag = ReadIfFlaggedByte(flag, 0x10000000, "unk114");
			flag = ReadIfFlaggedByte(flag, 0x20000000, "unk113");
			flag = ReadIfFlaggedByte(flag, 0x40000000, "unk11");
			flag = ReadIfFlaggedByte(flag, 0x80000000, "unk12");
			if (flag != 0) {
				AddComment("FLAG NOT EMTPY: " + flag);
			}
			EndNode(true);
			
			StartNode("Flags part 2");
	            flag = AddInt("Status Flags v.132");
			flag = ReadIfFlaggedByte(flag, 0x01, "??? 1");
			flag = ReadIfFlaggedByte(flag, 0x02, "??? 2");
			flag = ReadIfFlaggedByte(flag, 0x04, "??? 3");
			flag = ReadIfFlaggedLong(flag, 0x08, "??? 4");
			flag = ReadIfFlaggedInt(flag, 0x10, "??? 5");
	    	if (flag != 0) {
				AddComment("FLAG NOT EMTPY: " + flag);
			}
			EndNode(true);
			
			AddString("Name tag");
			
		    AddByte("Status Flag");
			AddByte("Amount of stars");
			
            AddShort("Potential1");
            AddShort("Potential2");
            AddShort("Potential3");
            AddShort("Bonus Potential4");
            AddShort("Bonus Potential5");
			AddShort("Bonus Potential6");
			
			AddShort("Anvilled item ID + (itemid - (itemid % 10000))");
			
			AddShort("Socket state?");
			
			AddShort("Nebulite item ID + 3060000");
			
			AddShort("Neb 2?");
            AddShort("Neb 3?");
			
			if (iscash == 0x00)
    			AddLong("?x8"); // Unique ID?
			AddLong("v126");
			
			AddInt("?x4");
			AddLong("v142");
			AddLong("v142");
			
			AddInt("v142 1");
			
			AddInt("v142 2 1");
			AddInt("v142 2 2");
			AddInt("v142 2 3");
		}
	    else if (type == 0x02) {
			AddShort("Amount");
			AddString("Name");
			AddShort("Flags");
			item = item / 10000;
			if (item == 233 || item == 207 || item == 287)    
    			AddLong("?");

		}
	    else if (type == 0x03) {
			AddPaddedString("Petname", 13);
			AddByte("Level");
			AddShort("Closeness");
			AddByte("Fullness");
			AddLong("Time");
			AddShort("New!?");
			AddShort("New!?");
			AddInt("New!?");
			AddShort("New!?");
			AddByte("-.-");
			AddInt("New!?!?!?!");
			AddInt("New!?!?!!?");
			AddShort("Moar new wtf man");
		}
	}
}

function ReadIfFlaggedByte(value, flag, text) {
	if ((value & flag) == flag) {
        AddByte(text + " - " + flag);
		AddComment("Left over flags: " + (value - flag));
		return value - flag;
	}
    return value;
}

function ReadIfFlaggedShort(value, flag, text) {
	if ((value & flag) == flag) {
		AddShort(text + " - " + flag);
		AddComment("Left over flags: " + (value - flag));
		return value - flag;
	}
    return value;
}

function ReadIfFlaggedInt(value, flag, text) {
	if ((value & flag) == flag) {
		AddInt(text + " - " + flag);
		AddComment("Left over flags: " + (value - flag));
		return value - flag;
	}
    return value;
}

function ReadIfFlaggedLong(value, flag, text) {
	if ((value & flag) == flag) {
		AddLong(text + " - " + flag);
		AddComment("Left over flags: " + (value - flag));
		return value - flag;
	}
    return value;
}

function ReadGuild() {
	using (ScriptAPI) {
		StartNode("Guild Info");
		AddInt("Guild ID");
		AddString("Guild Name");
		
		AddString("Rank 1");
		AddString("Rank 2");
		AddString("Rank 3");
		AddString("Rank 4");
		AddString("Rank 5");
		
		players = AddByte("players");
		for (i = 1; i <= players; i++)
		    AddInt("Char ID " + i);
		for (i = 1; i <= players; i++) {
		    StartNode("Player info " + i);
			AddPaddedString("name", 13);
			AddInt("Job Id");
			AddInt("level");
			AddInt("guild rank");
			AddInt("online");
			AddInt("alliance rank");
			AddInt("contribution");
			EndNode(false);
		}
	    
		AddInt("Capacity");
		AddShort("BG");
		AddByte("BGC");
		AddShort("FG");
		AddByte("FGC");
		
		AddString("Notice");
		
		AddInt("Points");
		AddInt("Today Points");
		AddInt("Alliance ID");
		
		AddByte("Unk");
		AddShort("Herp");
		
		skills = AddShort("Skills");
		for (i = 1; i <= skills; i++) {
		    StartNode("Skill info " + i);
			AddInt("Skill ID");
			AddInt("level");
			AddLong("Bought at");
			AddString("By");
			AddString("unk");
			EndNode(false);
		}
		
		EndNode(false);
	}
}