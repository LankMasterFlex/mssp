function DecodeCharacter() {
	using (ScriptAPI) {
		DecodeCharacterStatistics();
		DecodeCharacterAppearance();
		
		AddBool("View All Characters");

		ranking = AddBool("Ranked");
		
		if (ranking) {
			AddInt("Ranking 1");
			AddInt("Ranking 2");
			AddInt("Ranking 3");
			AddInt("Ranking 4");
		}
	}
}

function DecodeFarmInformation() {
	using (ScriptAPI) {
		StartNode("Farm");

		AddString("Name");
		AddInt("Waru");
		AddInt("Level");
		AddInt("Experience");
		AddInt("Aesthetic Points");
		AddInt("Gems");
		
		AddByte("Unknown");
		AddInt("");
		AddInt("");
		AddInt("");			

		EndNode(false);
	}
}

function DecodeCharacterData() {
	using (ScriptAPI) {

		StartNode("Character Data");		

		AddLong("Mask");
		AddByte("");
			
		for (i=0; i<3; i++)
			AddInt("");
		
		AddByte("");
		AddByte("");
		AddInt("");
		AddByte("");
		DecodeCharacterStatistics();
		AddLong("");
		AddByte("Buddylist Size");

		StartNode("Blessings");

		fairy = AddBool("Blessing Fairy");
		if (fairy)
			AddString("Blesser");
		
		empress = AddBool("Blessing Empress");
		if (empress)
			AddString("Blesser");
		
		ultimate = AddBool("Ultimate Explorer");
		if (ultimate)
			AddString("Blesser");
		
		EndNode(false);

		AddLong("Meso");
		DecodeCharacterItems();
		DecodeCharacterSkills();
		DecodeCharacterQuests();
		
		cnt = AddShort("Match Records");
		for (i = 0; i < cnt; i++) {
			StartNode("Match " + i);
			
			AddInt("2");
			AddInt("2");
			AddInt("2");
			AddInt("2");
			AddInt("2");
			
			EndNode(false);
		}

		cnt = AddShort("Couple Records");
		for (i = 0; i < cnt; i++) {
			AddField("Unk", 33);
		}
		cnt = AddShort("Friend Records");
		for (i = 0; i < cnt; i++) {
			AddField("Unk", 37);
		}
		cnt = AddShort("Marriage Records");
		for (i = 0; i < cnt; i++) {
			AddField("Unk", 48);
		}

		StartNode("Teleport Rocks");

		for (i=0; i<5+10+13+13; i++) {
			StartNode("Teleport Rock " + (i + 1));

			AddInt("Map ID");
			
			EndNode(false);
		}

		EndNode(false);

		AddInt(""); 
		DecodeCharacterMonsterBook();
		AddShort("");
		AddShort("");

		DecodeCharacterQuestsData();

		// TODO: Zero & Jaguar Information.
		
		AddShort("");
		AddShort("");
		AddShort("");

		DecodeCharacterStolenSkills();
		
		EndNode(false);
	}
}

function DecodeCharacterStolenSkills(job) {
	using (ScriptAPI) {
		StartNode("Character Stolen Skills");

		for (i=1; i<=4; i++) {
			DecodeStolenSkill(i);
		}

		DecodeCharacterChosenSkills();

		EndNode(false);
	}
}

function DecodeStolenSkill(i) {
	using (ScriptAPI) {
		StartNode("Stolen Skill " + (i + 1));

		count = 0;

		for (j=0; j != 0; j++) {
			val = AddInt("");

			if (val == 0)
				break;

			count++;
		}

		numSteal = 0;
		if (count == 1 || count == 2)
			numSteal = 4;
		else if (count == 3)
			numSteal = 3;
		else if (count == 4)
			numSteal = 2;

		while (count < numSteal)
			AddInt("");

		EndNode(false);
	}
}

function DecodeCharacterChosenSkills() {
	using (ScriptAPI) {
		StartNode("Character Chosen Skills");
		
		

		EndNode(false);
	}
}

function DecodeCharacterQuestsData() {
	using (ScriptAPI) {
		StartNode("Character Quests Data");

		questsDataCount = AddShort("Quests Data Count");
		
		for (i=0; i<questsDataCount; i++) {
			StartNode("Quest " + (i + 1) + "'s Data");

			AddShort("ID");
			AddString("Data");			

			EndNode(false);
		}

		EndNode(false);
	}
}

function DecodeCharacterMonsterBook() {
	using (ScriptAPI) {
		StartNode("Character Monster Book");

		finished = AddBool("Finished");

		StartNode("Card Items");

		cardItemsCount = AddShort("Card Items Count");

		for (i=0; i<cardItemsCount; i++) {
			StartNode("Card " + (i + 1));
			
			AddShort("Card Item ID");
			AddBool("Obtained");

			EndNode(false);
		}

		EndNode(false);
		
		AddInt("Set ID");

		EndNode(false);
	}
}

function DecodeCharacterItems() {
	using (ScriptAPI) {
		StartNode("Character Items");

		StartNode("Potion Pot");

		AddInt("");
		AddInt("");
		AddInt("");

		EndNode(false);

		AddInt("Character ID");
		AddField("", 31);
		AddByte("Equipment Slots");
		AddByte("Useable Slots");
		AddByte("Setup Slots");
		AddByte("Etcetera Slots");
		AddByte("Cash Slots");
		AddLong("Default Expiration Time");

		StartNode("Regular Equipped Items");


		for (i=1; i != 0; i++) {
			pos = AddUShort("Position");
			
			if (pos == 0)
				break;

			StartNode("Position " + pos + "'s Equip");

			DecodeItem();

			EndNode(false);
		}	
	
		EndNode(false);

		StartNode("Cash Equipped Items");

		for (i=1; i != 0; i++) {
			pos = AddUShort("Position");
			
			if (pos == 0)
				break;

			StartNode("Position " + pos + "'s Equip");

			DecodeItem();

			EndNode(false);
		}

		EndNode(false);

		StartNode("Equip Items");

		for (i=1; i != 0; i++) {
			pos = AddUShort("Position");
			
			if (pos == 0)
				break;

			StartNode("Position " + pos + "'s Equip");

			DecodeItem();

			EndNode(false);
		}		

		EndNode(false);

		AddShort("Unknown Items");
		AddShort("Dragon Items");
		AddShort("Mechanic Items");
		AddShort("Android Items");

		for (i=0; i<8; i++)
			AddShort("Unknown Items");

		StartNode("Useable Items");

		for (i=1; i != 0; i++) {
			pos = AddByte("Position");
			
			if (pos == 0)
				break;

			StartNode("Position " + pos + "'s Item");

			DecodeItem();

			EndNode(false);
		}

		EndNode(false);

		StartNode("Setup Items");

		for (i=1; i != 0; i++) {
			pos = AddByte("Position");
			
			if (pos == 0)
				break;

			StartNode("Position " + pos + "'s Item");

			DecodeItem();

			EndNode(false);
		}

		EndNode(false);

		StartNode("Etcetera Items");

		for (i=1; i != 0; i++) {
			pos = AddByte("Position");
			
			if (pos == 0)
				break;

			StartNode("Position " + pos + "'s Item");

			DecodeItem();

			EndNode(false);
		}

		EndNode(false);

		StartNode("Cash Items");

		for (i=1; i != 0; i++) {
			pos = AddByte("Position");
			
			if (pos == 0)
				break;

			StartNode("Position " + pos + "'s Item");

			DecodeItem();

			EndNode(false);
		}

		EndNode(false);

		AddField("Extended Slots", 17);

		EndNode(false);
	}
}

function DecodeCharacterSkills() {
	using (ScriptAPI) {
		StartNode("Character Skills");

		AddBool("New Skills Format");
		skillCount = AddShort("Skills Count");

		for (i=0; i<skillCount; i++) {
			StartNode("Skill " + (i + 1));
			
			AddInt("ID");
			AddInt("Current Level");
			AddLong("Default Expiration Time");

			EndNode(false);
		}

		cooldownSkillsCount = AddShort("Cooldown Skills Count");

		for (i=0; i<cooldownSkillsCount; i++) {
			StartNode("Cooldown Skill " + (i + 1));
		
			AddInt("ID");
			AddShort("Remaining Seconds");
			
			EndNode(false);
		}

		if (cooldownSkillsCount == 0)
			AddShort("No cooldowns");


		EndNode(false);
	}
}

function DecodeCharacterQuests() {
	using (ScriptAPI) {
		StartNode("Character Quests");

		AddBool("New Quests Format");

		StartNode("Started Quests");
		
		startedQuestsCount = AddShort("Started Quests Count");

		for (i=0; i<startedQuestsCount; i++) {
			StartNode("Started Quest " + (i + 1));

			AddShort("ID");
			AddString("Mob Kills");

			EndNode(false);
		}

		EndNode(false);

		StartNode("Unknown Quests");

		rlhCount = AddShort("Count");
		for (i = 1; i <= rlhCount; i++) {
			AddString("Quest " + i);
			AddString("value?");
		}

		EndNode(false);

		StartNode("Completed Quests");

		AddBool("New Quests Format");
		
		completedQuestsCount = AddShort("Comleted Quests Count");
		
		for (i=0; i<completedQuestsCount; i++) {
			StartNode("Completed Quest " + (i + 1));

			AddShort("ID");
			AddInt("Completion Timestamp");

			EndNode(false);	
		}

		EndNode(false);
		EndNode(false);
	}
}

function DecodeCharacterStatistics() {
	using (ScriptAPI) {
		StartNode("Character Information");

		AddInt("ID");
		AddPaddedString("Name", 13);
		AddByte("Gender");
		AddByte("Skin ID");
		AddInt("Face ID");
		AddInt("Hair ID");
		
		AddLong("Pet 1's Unique ID");
		AddLong("Pet 2's Unique ID");
		AddLong("Pet 3's Unique ID");
		
		AddByte("Level");
		job = AddShort("Job ID");
		AddShort("Strength");
		AddShort("Dexterity");
		AddShort("Intelligence");
		AddShort("Luck");
		AddInt("Current HP");
		AddInt("Max HP");
		AddInt("Current MP");
		AddInt("Max MP");
		AddShort("Available AP");

		
		/*if (IsSeperatedSP(job)) {
			count = AddByte("SP Count");
			
			for (i =0; i<count; i++) {
				AddByte("SP Key");
				AddByte("SP Value");
			}
		} else
			AddShort("Available SP");
		*/
/*
		a1 = job;
       		adventurer = a1 % 1000 / 100;
        	if (a1 / 100 == 27)
            		adventurer = 2;
        	if (a1 / 100 == 36)
            		adventurer = 4;

		if (
                	a1 / 1000 == 1 && (adventurer == 5 || adventurer == 3 || adventurer == 1 || adventurer == 0) ||
                	a1 / 1000 == 3 ||
                
                    	a1 / 100 == 22 || a1 == 2001 || 
                    	a1 / 100 == 23 || a1 == 2002 || 
                    	a1 / 100 == 24 || a1 == 2003 || 
                    	a1 / 100 == 51 || a1 == 5000 ||
                    	a1 / 100 == 27 || a1 == 2004 ||
                    	a1 / 100 == 61 || a1 == 6000 ||
                    	a1 / 100 == 65 || a1 == 6001 ||
                    	a1 / 10 == 57 || a1 == 508 ||
		            a1 / 1000 == 4 ) {
			l = AddByte("SPS");
			for (j = 0; j < l; j++) {
				AddByte("VAL1");
				AddInt("VAL2");
			}
		}
		else {
	    	AddShort("SP");
		}
*/
		AddByte("SP");
		AddLong("Experience");
		AddInt("Fame");
		AddInt("Gachapon Experience");
		AddInt("Migration Data");
		AddInt("Map ID");
		AddByte("Initial Spawn Point");
		AddInt("");
		AddShort("Job Category");

		if (IsDemonSlayer(job) || IsXenon(job) || IsDemonAvenger(job))
			AddInt("Face Marking ID");

		AddByte("Fatigue");
		AddInt("Current Date");
		
		for (i=0; i<6; i++)
			AddInt("Trait " + (i + 1) + "'s Value");
		
		for (i=0; i<6; i++)
			AddShort("Trait " + (i + 1) + "'s Today's Value");
		
		AddByte("");
		AddLong("");
		AddInt("Battle Experience");
		AddByte("Battle Rank");
		AddInt("Battle Points");

		AddByte("");
		AddByte("");
		AddInt("");

		AddByte("Job ID");
		AddLong("");
		AddInt("Reward ID");
		AddBool("Reward Existing");
	
		for (i=0; i<9; i++) {
			AddInt("Part Time Job");
			AddByte("Part Time Job");
			AddInt("Part Time Job");
		}

		EndNode(false);
	}
}

function DecodeCharacterAppearance() {
	using (ScriptAPI) {
		StartNode("Character Appearance");
		
		AddByte("Gender");
		AddByte("Skin ID");
		AddInt("Face ID");
		job = AddInt("Job ID");
		AddBool("Slot 1");
		AddInt("Hair ID");
		
		StartNode("Visible Equips Layer");
		
		for (i = 1; i != 0xFF; i++) {
			val = AddByte("Slot " + i);
			
			if (val == 0xFF)
				break;

			AddInt("Item " + i + "'s ID");
		}

		EndNode(false);

		StartNode("Hidden Equips Layer");
		
		for (i = 1; i != 0xFF; i++) {
			val = AddByte("Slot " + i);
			
			if (val == 0xFF)
				break;

			AddInt("Item " + i + "'s ID");
		}

		EndNode(false);

		StartNode("Totems Equips Layer");
		
		for (i = 1; i != 0xFF; i++) {
			val = AddByte("Slot " + i);
			
			if (val == 0xFF)
				break;

			AddInt("Item " + i + "'s ID");
		}

		EndNode(false);
		
		AddInt("Cash Weapon ID");
		AddInt("Weapon ID");
		AddInt("Shield ID");
		AddBool("Mercedes");

		for (i=0; i<3; i++)
			AddInt("Pet " + i + "'s ID");
		
		if (IsDemonSlayer(job) || IsDemonAvenger(job) || IsXenon(job))
			AddInt("Face Marking ID");
		
		if (IsZero(job))
			AddBool("Beta");

		EndNode(false);
	}
}

function DecodeItem() {
	using (ScriptAPI) {
		type = AddByte("Type");
		item = AddInt("Item ID");
		iscash = AddByte("HasCashid");
		if (iscash == 0x01) {
			AddLong("CashID");
		}
		
		AddLong("Expiration Time");
		AddInt("-1 ?");
		if (type == 0x01) {
			StartNode("Flags part 1");
	           flag = AddInt("Status Flags v.132");
			inputflag = flag;
			flag = ReadIfFlaggedByte(flag, 0x01, "Slots");
			flag = ReadIfFlaggedByte(flag, 0x02, "Scrolls");

			flag = ReadIfFlaggedShort(flag, 0x04, "Str");
			flag = ReadIfFlaggedShort(flag, 0x08, "Dex");
			flag = ReadIfFlaggedShort(flag, 0x10, "Int");
			flag = ReadIfFlaggedShort(flag, 0x20, "Luk");
			flag = ReadIfFlaggedShort(flag, 0x40, "HP");
			flag = ReadIfFlaggedShort(flag, 0x80, "MP");
			flag = ReadIfFlaggedShort(flag, 0x100, "WATK");
			flag = ReadIfFlaggedShort(flag, 0x200, "MATK");
			flag = ReadIfFlaggedShort(flag, 0x400, "WDEF");
			flag = ReadIfFlaggedShort(flag, 0x800, "MDEF");
			flag = ReadIfFlaggedShort(flag, 0x1000, "ACC");
			flag = ReadIfFlaggedShort(flag, 0x2000, "Avo");
			flag = ReadIfFlaggedShort(flag, 0x4000, "Hands");
			flag = ReadIfFlaggedShort(flag, 0x8000, "Speed");
			flag = ReadIfFlaggedShort(flag, 0x10000, "Jump");
			flag = ReadIfFlaggedShort(flag, 0x20000, "Flags");

			flag = ReadIfFlaggedByte(flag, 0x40000, "Increased Skill");

			flag = ReadIfFlaggedByte(flag, 0x80000, "Item Level");
			flag = ReadIfFlaggedLong(flag, 0x100000, "Item EXP");

			flag = ReadIfFlaggedInt(flag, 0x200000, "unk1112");

			flag = ReadIfFlaggedInt(flag, 0x400000, "Hammertiem");

			flag = ReadIfFlaggedShort(flag, 0x800000, "PVP Damage");
			flag = ReadIfFlaggedByte(flag, 0x1000000, "unk118");
			flag = ReadIfFlaggedShort(flag, 0x2000000, "unk119");
			flag = ReadIfFlaggedInt(flag, 0x4000000, "unk1176");

			flag = ReadIfFlaggedByte(flag, 0x8000000, "unk115");
			flag = ReadIfFlaggedByte(flag, 0x10000000, "unk114");
			flag = ReadIfFlaggedByte(flag, 0x20000000, "unk113");
			flag = ReadIfFlaggedByte(flag, 0x40000000, "unk11");
			flag = ReadIfFlaggedByte(flag, 0x80000000, "unk12");
			if (flag != 0) {
				AddComment("FLAG NOT EMTPY: " + flag);
			}
			EndNode(true);
			
			StartNode("Flags part 2");
	            flag = AddInt("Status Flags v.132");
			flag = ReadIfFlaggedByte(flag, 0x01, "??? 1");
			flag = ReadIfFlaggedByte(flag, 0x02, "??? 2");
			flag = ReadIfFlaggedByte(flag, 0x04, "??? 3");
			flag = ReadIfFlaggedLong(flag, 0x08, "??? 4");
			flag = ReadIfFlaggedInt(flag, 0x10, "??? 5");
	    	if (flag != 0) {
				AddComment("FLAG NOT EMTPY: " + flag);
			}
			EndNode(true);
			
			AddString("Name tag");
			
		    AddByte("Status Flag");
			AddByte("Amount of stars");
			
            AddShort("Potential1");
            AddShort("Potential2");
            AddShort("Potential3");
            AddShort("Bonus Potential4");
            AddShort("Bonus Potential5");
			AddShort("Bonus Potential6");
			
			AddShort("Anvilled item ID + (itemid - (itemid % 10000))");
			
			AddShort("Socket state?");
			
			AddShort("Nebulite item ID + 3060000");
			
			AddShort("Neb 2?");
            AddShort("Neb 3?");
			
			if (iscash == 0x00)
    			AddLong("?x8"); // Unique ID?
			AddLong("v126");
			
			AddInt("?x4");
			AddLong("v142");
			AddLong("v142");
			
			AddInt("v142 1");
			
			AddInt("v142 2 1");
			AddInt("v142 2 2");
			AddInt("v142 2 3");
		}
	    else if (type == 0x02) {
			AddShort("Amount");
			AddString("Name");
			AddShort("Flags");
			item = item / 10000;
			if (item == 233 || item == 207 || item == 287)    
    			AddLong("?");

		}
	    else if (type == 0x03) {
			AddPaddedString("Petname", 13);
			AddByte("Level");
			AddShort("Closeness");
			AddByte("Fullness");
			AddLong("Time");
			AddShort("New!?");
			AddShort("New!?");
			AddInt("New!?");
			AddShort("New!?");
			AddByte("-.-");
			AddInt("New!?!?!?!");
			AddInt("New!?!?!!?");
			AddShort("Moar new wtf man");
		}
	}
}

function IsSeperatedSP(job) {
	if (IsKOC(job))
		return false;
	else if (IsAran(job))
		return false;
	else if (job == 900 || job == 910 || job = 800)
		return false;
	else
		return true;
}

function IsKOC(job) {
	return job >= 1000 && job < 2000;
}

function IsAran(job) {
	return job >= 2000 && job <= 2112 && job != 2001 && job != 2002 && job != 2003 && job != 2004;
}

function IsDemonSlayer(job) {
	return job == 30001 || (job >= 3100 && job <= 3112 && job != 3101);
}

function IsXenon(job) {
	return job == 3002 || (job >= 3600 && job <= 3612);
}

function IsDemonAvenger(job) {
	return job == 3001 || job == 3101 || (job >= 3120 && job <= 3122);
}

function IsZero(job) {
	return job == 10000 || (job >= 10100 && job <= 10112);
}


function ReadIfFlaggedByte(value, flag, text) {
	if ((value & flag) == flag) {
        AddByte(text + " - " + flag);
		AddComment("Left over flags: " + (value - flag));
		return value - flag;
	}
    return value;
}

function ReadIfFlaggedShort(value, flag, text) {
	if ((value & flag) == flag) {
		AddShort(text + " - " + flag);
		AddComment("Left over flags: " + (value - flag));
		return value - flag;
	}
    return value;
}

function ReadIfFlaggedInt(value, flag, text) {
	if ((value & flag) == flag) {
		AddInt(text + " - " + flag);
		AddComment("Left over flags: " + (value - flag));
		return value - flag;
	}
    return value;
}

function ReadIfFlaggedLong(value, flag, text) {
	if ((value & flag) == flag) {
		AddLong(text + " - " + flag);
		AddComment("Left over flags: " + (value - flag));
		return value - flag;
	}
    return value;
}